## NVRAM configuration file. 
##
## Explains the contents of the system's non volatile RAM
## as seen and manipulated by the nvram utility.


## The nvram type is set with the directive
##     * hardware HARDWARE_NAME
##
## HARDWARE_NAME may be
##     * intel    (for Intel ICHx southbridge series)
##     * via82cxx (for VIA 82Cxx ISA bridge series)
##     * via823x  (for VIA 823x ISA bridge series)
##     * ds1685   (for distinct DS1685 RTC chips)
## 
## If no or a wrong hardware directive is given, the extended NVRAM (Bytes 128
## and above) is not accessible.
hardware via823x


## The include directive allows to include other configuration files at the
## point where the include directive was given. Includes may be nested.
#include /etc/nvram.d/anyfile


## The NVRAM configuration lists a number of fields, each with a position and
## size given in bytes. The resulting map is applied to the system's NVRAM.
## If a field in the map exceeds the NVRAM size in the actual system, reads
## of such fields return always 0xff in the locations where no further NVRAM
## exists, and writes are a no-op in such regions. So the last entry which
## seems to work maybe broken. Be careful when editing this NVRAM configuration!

##
## There are currently two directives for entry types:
##     * bytearray POSITION FIELD_SIZE IDENTIFIER
##     * string    POSITION FIELD_SIZE IDENTIFIER
##
## Bytearrays are a fixed number of bytes and are printed as non-prefixed hex
## bytes by default. On set operation, the exact number of bytes in the same
## format must be supplied as the value.
##
## Strings are stored as (multi-byte) chars in the system encoding and are
## printed as such. If an actual string is shorter than the field size (denoted
## by a \0 at the end), only that part of the field contents is printed.
## On set operation, the string may be at most the size of the field. A \0 is
## appended automatically, aside from the case where the field is completely
## filled -- then there is no \0 neccessary and thus, not written.
## The field size is fixed in the configuration and *not* dependend of the
## field contents.
##
## *** NOTES:
## 
##     * International characters may occupy more than one byte per character,
##       especially in the UTF-8 encoding standard on modern systems.
##     * If the system encoding is changed, string fields may produce nonsense
##       on output. Use the "iconv" utility to fix that.


## The first 14 bytes are time & date registers of the RTC. Never change
## that registers. (Besides changing time and date, doing so on a PC with
## the DS1865 RTC may break the operation nvram utility and lead to further
## data corruption!) 
bytearray RTC_REGISTERS 0x00 14


## On an IBM PC, a 50 byte BIOS data area follows. Some of the fields are
## standard to all PC BIOS', some depend on the actual BIOS version. Maybe
## explained in detail later.
bytearray PC_BIOS_DATA 0x0E 50


## Then a variable size extended BIOS area follows. On my PC with Award BIOS,
## this field is 64 bytes long, filling up all the space up to address 127.
bytearray EXTENDED_BIOS_DATA 0x40 64



## Bytes 128 and higher are often at least partially unused by the BIOS.
## So this mapping may be up to the computer user.
##
## *** IMPORTANT NOTE:
##
## Not all systems have an extended NVRAM (Bytes 128 and higher). It
## depends on the chipset. The nvram utility currently supports the extended
## NVRAM of the following RTC chips/integrated RTCs
##     * Dallas DS1685:      256 Bytes total
##     * Intel ICHx:         256 Bytes total
##     * VIA 82Cxx and 823x: 256 Bytes total
##
bytearray TEST 0x80 8 
string TEST_S 0x80 4

